@page "/room/{id:guid}"
@implements IDisposable

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Mvc.Routing

@using LanguageExt;

@using GS.PPoker.Models
@using GS.PPoker.Services

@inject RoomService RoomService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject LinkGenerator LinkGenerator

<div id="pg-room">
    <div id="room-container">
        <div id="vote-button-panel">
            @if (NavigationManager.BaseUri.StartsWith("https", StringComparison.OrdinalIgnoreCase))
            {
                <button class="referal-link" onclick="navigator.clipboard.writeText('@JoinLink')">
                    کپی کردن لینک دعوت
                </button>
            }
            else
            {
                <button class="referal-link" onclick="navigator.clipboard.writeText('@JoinLink')">
                    <a href="@JoinLink">لینک دعوت</a>
                </button>
            }

            @if (IsOwner)
            {
                <button @onclick="OnRevealVotes" class="admin-button">نمایش رای‌ها</button>
                <button @onclick="OnClearVotes" class="admin-button">پاک کردن رای‌ها</button>
            }
        </div>

        <div id="vote-card-panel">
            @for (var i = 0; i < _room.PossibleVotes.Count; i++)
            {
                var temp = i;
                <button class='@(_myVote == i ? "my-vote" : "")' @onclick="() => OnVote(temp)">
                    @_room.PossibleVotes[i]
                </button>
            }
        </div>

        <div id="member-panel">
            @foreach (var mem in _room.Members)
            {
                <div class='@(mem.Vote is not null ? "room-member voted" : "room-member")'>
                    <div class="member-name">@mem.Name</div>
                    <div class="member-vote">@mem.Vote?.ToString()</div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Guid Id { get; set; } = Guid.Empty;
    RoomId RoomId => Id;
    string JoinLink => NavigationManager.BaseUri + $"join-room?roomId={RoomId}";

    UserId _userId = Guid.Empty;
    ReadOnlyRoom _room = ReadOnlyRoom.Empty;

    int? _myVote;

    bool IsOwner => _userId == _room.OwnerId;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _userId = await GetUserId();

        RoomService.AddObserver(RoomId, OnChange);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (!_room.Members.Any(m => m.UserId == _userId))
        {
            NavigationManager.NavigateTo(JoinLink, true);
        }
    }

    public void Dispose()
    {
        RoomService.RemoveObserver(RoomId, OnChange);
    }

    private async Task<UserId> GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userIdStr = user.FindFirst("id")?.Value;
        return Guid.TryParse(userIdStr, out var temp) ? temp : Guid.Empty;
    }

    private void OnChange(Models.ReadOnlyRoom room)
    {
        InvokeAsync(() =>
        {
            if (_room.AreVotesRevealed && !room.AreVotesRevealed)
            {
                _myVote = null;
            }

            _room = room;
            StateHasChanged();
        });
    }

    private void OnClearVotes() => RoomService.ClearVotes(_room.Id);
    private void OnRevealVotes() => RoomService.RevealVotes(_room.Id);
    private void OnVote(int i)
    {
        var preMyVote = _myVote;
        _myVote = (_myVote.HasValue && i == _myVote) ? null : i;
        var result = RoomService.Vote(RoomId, _userId, _myVote);
        if (!result.IsRight)
        {
            _myVote = preMyVote;
        }
    }
}